/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.ImageResolvableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageResolvable extends TableImpl<ImageResolvableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.image_resolvable</code>
     */
    public static final ImageResolvable IMAGE_RESOLVABLE = new ImageResolvable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageResolvableRecord> getRecordType() {
        return ImageResolvableRecord.class;
    }

    /**
     * The column <code>public.image_resolvable.id</code>.
     */
    public final TableField<ImageResolvableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.image_resolvable.image_file_id</code>.
     */
    public final TableField<ImageResolvableRecord, UUID> IMAGE_FILE_ID = createField(DSL.name("image_file_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.image_resolvable.synthetic</code>.
     */
    public final TableField<ImageResolvableRecord, Boolean> SYNTHETIC = createField(DSL.name("synthetic"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ImageResolvable(Name alias, Table<ImageResolvableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageResolvable(Name alias, Table<ImageResolvableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.image_resolvable</code> table reference
     */
    public ImageResolvable(String alias) {
        this(DSL.name(alias), IMAGE_RESOLVABLE);
    }

    /**
     * Create an aliased <code>public.image_resolvable</code> table reference
     */
    public ImageResolvable(Name alias) {
        this(alias, IMAGE_RESOLVABLE);
    }

    /**
     * Create a <code>public.image_resolvable</code> table reference
     */
    public ImageResolvable() {
        this(DSL.name("image_resolvable"), null);
    }

    public <O extends Record> ImageResolvable(Table<O> child, ForeignKey<O, ImageResolvableRecord> key) {
        super(child, key, IMAGE_RESOLVABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ImageResolvableRecord> getPrimaryKey() {
        return Keys.IMAGE_RESOLVABLE_PKEY;
    }

    @Override
    public List<ForeignKey<ImageResolvableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IMAGE_RESOLVABLE__FK_IMAGE_RESOLVABLE_IMAGE_FILE_ID);
    }

    private transient ImageFile _imageFile;

    public ImageFile imageFile() {
        if (_imageFile == null)
            _imageFile = new ImageFile(this, Keys.IMAGE_RESOLVABLE__FK_IMAGE_RESOLVABLE_IMAGE_FILE_ID);

        return _imageFile;
    }

    @Override
    public ImageResolvable as(String alias) {
        return new ImageResolvable(DSL.name(alias), this);
    }

    @Override
    public ImageResolvable as(Name alias) {
        return new ImageResolvable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageResolvable rename(String name) {
        return new ImageResolvable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageResolvable rename(Name name) {
        return new ImageResolvable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
