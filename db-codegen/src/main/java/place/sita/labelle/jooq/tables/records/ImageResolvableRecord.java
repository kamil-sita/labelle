/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import place.sita.labelle.jooq.tables.ImageResolvable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageResolvableRecord extends UpdatableRecordImpl<ImageResolvableRecord> implements Record3<UUID, UUID, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.image_resolvable.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.image_resolvable.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.image_resolvable.image_file_id</code>.
     */
    public void setImageFileId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.image_resolvable.image_file_id</code>.
     */
    public UUID getImageFileId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.image_resolvable.synthetic</code>.
     */
    public void setSynthetic(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.image_resolvable.synthetic</code>.
     */
    public Boolean getSynthetic() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ImageResolvable.IMAGE_RESOLVABLE.ID;
    }

    @Override
    public Field<UUID> field2() {
        return ImageResolvable.IMAGE_RESOLVABLE.IMAGE_FILE_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return ImageResolvable.IMAGE_RESOLVABLE.SYNTHETIC;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getImageFileId();
    }

    @Override
    public Boolean component3() {
        return getSynthetic();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getImageFileId();
    }

    @Override
    public Boolean value3() {
        return getSynthetic();
    }

    @Override
    public ImageResolvableRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ImageResolvableRecord value2(UUID value) {
        setImageFileId(value);
        return this;
    }

    @Override
    public ImageResolvableRecord value3(Boolean value) {
        setSynthetic(value);
        return this;
    }

    @Override
    public ImageResolvableRecord values(UUID value1, UUID value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageResolvableRecord
     */
    public ImageResolvableRecord() {
        super(ImageResolvable.IMAGE_RESOLVABLE);
    }

    /**
     * Create a detached, initialised ImageResolvableRecord
     */
    public ImageResolvableRecord(UUID id, UUID imageFileId, Boolean synthetic) {
        super(ImageResolvable.IMAGE_RESOLVABLE);

        setId(id);
        setImageFileId(imageFileId);
        setSynthetic(synthetic);
    }
}
