/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq;


import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import place.sita.labelle.jooq.tables.EffectiveHistoricConfiguration;
import place.sita.labelle.jooq.tables.Image;
import place.sita.labelle.jooq.tables.ImageDelta;
import place.sita.labelle.jooq.tables.ImageFile;
import place.sita.labelle.jooq.tables.ImageResolvable;
import place.sita.labelle.jooq.tables.ImageTags;
import place.sita.labelle.jooq.tables.Marker;
import place.sita.labelle.jooq.tables.ParentChildImage;
import place.sita.labelle.jooq.tables.Preferences;
import place.sita.labelle.jooq.tables.Repository;
import place.sita.labelle.jooq.tables.RepositoryRelationship;
import place.sita.labelle.jooq.tables.Root;
import place.sita.labelle.jooq.tables.Tag;
import place.sita.labelle.jooq.tables.TagCategory;
import place.sita.labelle.jooq.tables.TagDelta;
import place.sita.labelle.jooq.tables.TagDeltaCalc;
import place.sita.labelle.jooq.tables.TagImage;
import place.sita.labelle.jooq.tables.TagTranslation;
import place.sita.labelle.jooq.tables.Task;
import place.sita.labelle.jooq.tables.TaskConfig;
import place.sita.labelle.jooq.tables.TaskDependencies;
import place.sita.labelle.jooq.tables.TaskExecution;
import place.sita.labelle.jooq.tables.TaskPlanning;
import place.sita.labelle.jooq.tables.TaskType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.effective_historic_configuration</code>.
     */
    public final EffectiveHistoricConfiguration EFFECTIVE_HISTORIC_CONFIGURATION = EffectiveHistoricConfiguration.EFFECTIVE_HISTORIC_CONFIGURATION;

    /**
     * The table <code>public.image</code>.
     */
    public final Image IMAGE = Image.IMAGE;

    /**
     * The table <code>public.image_delta</code>.
     */
    public final ImageDelta IMAGE_DELTA = ImageDelta.IMAGE_DELTA;

    /**
     * The table <code>public.image_file</code>.
     */
    public final ImageFile IMAGE_FILE = ImageFile.IMAGE_FILE;

    /**
     * The table <code>public.image_resolvable</code>.
     */
    public final ImageResolvable IMAGE_RESOLVABLE = ImageResolvable.IMAGE_RESOLVABLE;

    /**
     * The table <code>public.image_tags</code>.
     */
    public final ImageTags IMAGE_TAGS = ImageTags.IMAGE_TAGS;

    /**
     * The table <code>public.marker</code>.
     */
    public final Marker MARKER = Marker.MARKER;

    /**
     * The table <code>public.parent_child_image</code>.
     */
    public final ParentChildImage PARENT_CHILD_IMAGE = ParentChildImage.PARENT_CHILD_IMAGE;

    /**
     * The table <code>public.preferences</code>.
     */
    public final Preferences PREFERENCES = Preferences.PREFERENCES;

    /**
     * The table <code>public.repository</code>.
     */
    public final Repository REPOSITORY = Repository.REPOSITORY;

    /**
     * The table <code>public.repository_relationship</code>.
     */
    public final RepositoryRelationship REPOSITORY_RELATIONSHIP = RepositoryRelationship.REPOSITORY_RELATIONSHIP;

    /**
     * The table <code>public.root</code>.
     */
    public final Root ROOT = Root.ROOT;

    /**
     * The table <code>public.tag</code>.
     */
    public final Tag TAG = Tag.TAG;

    /**
     * The table <code>public.tag_category</code>.
     */
    public final TagCategory TAG_CATEGORY = TagCategory.TAG_CATEGORY;

    /**
     * The table <code>public.tag_delta</code>.
     */
    public final TagDelta TAG_DELTA = TagDelta.TAG_DELTA;

    /**
     * The table <code>public.tag_delta_calc</code>.
     */
    public final TagDeltaCalc TAG_DELTA_CALC = TagDeltaCalc.TAG_DELTA_CALC;

    /**
     * The table <code>public.tag_image</code>.
     */
    public final TagImage TAG_IMAGE = TagImage.TAG_IMAGE;

    /**
     * The table <code>public.tag_translation</code>.
     */
    public final TagTranslation TAG_TRANSLATION = TagTranslation.TAG_TRANSLATION;

    /**
     * The table <code>public.task</code>.
     */
    public final Task TASK = Task.TASK;

    /**
     * The table <code>public.task_config</code>.
     */
    public final TaskConfig TASK_CONFIG = TaskConfig.TASK_CONFIG;

    /**
     * The table <code>public.task_dependencies</code>.
     */
    public final TaskDependencies TASK_DEPENDENCIES = TaskDependencies.TASK_DEPENDENCIES;

    /**
     * The table <code>public.task_execution</code>.
     */
    public final TaskExecution TASK_EXECUTION = TaskExecution.TASK_EXECUTION;

    /**
     * The table <code>public.task_planning</code>.
     */
    public final TaskPlanning TASK_PLANNING = TaskPlanning.TASK_PLANNING;

    /**
     * The table <code>public.task_type</code>.
     */
    public final TaskType TASK_TYPE = TaskType.TASK_TYPE;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            EffectiveHistoricConfiguration.EFFECTIVE_HISTORIC_CONFIGURATION,
            Image.IMAGE,
            ImageDelta.IMAGE_DELTA,
            ImageFile.IMAGE_FILE,
            ImageResolvable.IMAGE_RESOLVABLE,
            ImageTags.IMAGE_TAGS,
            Marker.MARKER,
            ParentChildImage.PARENT_CHILD_IMAGE,
            Preferences.PREFERENCES,
            Repository.REPOSITORY,
            RepositoryRelationship.REPOSITORY_RELATIONSHIP,
            Root.ROOT,
            Tag.TAG,
            TagCategory.TAG_CATEGORY,
            TagDelta.TAG_DELTA,
            TagDeltaCalc.TAG_DELTA_CALC,
            TagImage.TAG_IMAGE,
            TagTranslation.TAG_TRANSLATION,
            Task.TASK,
            TaskConfig.TASK_CONFIG,
            TaskDependencies.TASK_DEPENDENCIES,
            TaskExecution.TASK_EXECUTION,
            TaskPlanning.TASK_PLANNING,
            TaskType.TASK_TYPE
        );
    }
}
