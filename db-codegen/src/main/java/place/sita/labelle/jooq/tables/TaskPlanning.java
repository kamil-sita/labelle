/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.TaskPlanningRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskPlanning extends TableImpl<TaskPlanningRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task_planning</code>
     */
    public static final TaskPlanning TASK_PLANNING = new TaskPlanning();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskPlanningRecord> getRecordType() {
        return TaskPlanningRecord.class;
    }

    /**
     * The column <code>public.task_planning.task_type_id</code>.
     */
    public final TableField<TaskPlanningRecord, UUID> TASK_TYPE_ID = createField(DSL.name("task_type_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.task_planning.id</code>.
     */
    public final TableField<TaskPlanningRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.task_planning.config</code>.
     */
    public final TableField<TaskPlanningRecord, String> CONFIG = createField(DSL.name("config"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.task_planning.creation_date</code>.
     */
    public final TableField<TaskPlanningRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private TaskPlanning(Name alias, Table<TaskPlanningRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskPlanning(Name alias, Table<TaskPlanningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"task_planning\" as  SELECT outer_task.task_type_id,\n    outer_task.id,\n    task_config.config,\n    outer_task.creation_date\n   FROM (task outer_task\n     LEFT JOIN task_config ON ((outer_task.id = task_config.task_id)))\n  WHERE ((outer_task.status = ANY (ARRAY['CREATED'::task_status, 'SOFT_FAIL'::task_status])) AND (NOT (EXISTS ( SELECT 1\n           FROM task inner_task,\n            task_dependencies\n          WHERE ((task_dependencies.required_dependency_task_id = inner_task.id) AND (task_dependencies.task_id = outer_task.id) AND (inner_task.status <> ALL (ARRAY['DONE'::task_status, 'DUPLICATE'::task_status, 'OVERRIDDEN_HARD_FAIL'::task_status])))))));"));
    }

    /**
     * Create an aliased <code>public.task_planning</code> table reference
     */
    public TaskPlanning(String alias) {
        this(DSL.name(alias), TASK_PLANNING);
    }

    /**
     * Create an aliased <code>public.task_planning</code> table reference
     */
    public TaskPlanning(Name alias) {
        this(alias, TASK_PLANNING);
    }

    /**
     * Create a <code>public.task_planning</code> table reference
     */
    public TaskPlanning() {
        this(DSL.name("task_planning"), null);
    }

    public <O extends Record> TaskPlanning(Table<O> child, ForeignKey<O, TaskPlanningRecord> key) {
        super(child, key, TASK_PLANNING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public TaskPlanning as(String alias) {
        return new TaskPlanning(DSL.name(alias), this);
    }

    @Override
    public TaskPlanning as(Name alias) {
        return new TaskPlanning(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskPlanning rename(String name) {
        return new TaskPlanning(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskPlanning rename(Name name) {
        return new TaskPlanning(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
