/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.ImageTagsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageTags extends TableImpl<ImageTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.image_tags</code>
     */
    public static final ImageTags IMAGE_TAGS = new ImageTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageTagsRecord> getRecordType() {
        return ImageTagsRecord.class;
    }

    /**
     * The column <code>public.image_tags.tag</code>.
     */
    public final TableField<ImageTagsRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.image_tags.tag_category</code>.
     */
    public final TableField<ImageTagsRecord, String> TAG_CATEGORY = createField(DSL.name("tag_category"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.image_tags.image_id</code>.
     */
    public final TableField<ImageTagsRecord, UUID> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.image_tags.repository_id</code>.
     */
    public final TableField<ImageTagsRecord, UUID> REPOSITORY_ID = createField(DSL.name("repository_id"), SQLDataType.UUID, this, "");

    private ImageTags(Name alias, Table<ImageTagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageTags(Name alias, Table<ImageTagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"image_tags\" as  SELECT tag.value AS tag,\n    tag_category.value AS tag_category,\n    tag_image.image_id,\n    repository.id AS repository_id\n   FROM tag,\n    tag_image,\n    tag_category,\n    repository\n  WHERE ((tag.tag_category_id = tag_category.id) AND (tag_category.repository_id = repository.id) AND (tag_image.tag_id = tag.id));"));
    }

    /**
     * Create an aliased <code>public.image_tags</code> table reference
     */
    public ImageTags(String alias) {
        this(DSL.name(alias), IMAGE_TAGS);
    }

    /**
     * Create an aliased <code>public.image_tags</code> table reference
     */
    public ImageTags(Name alias) {
        this(alias, IMAGE_TAGS);
    }

    /**
     * Create a <code>public.image_tags</code> table reference
     */
    public ImageTags() {
        this(DSL.name("image_tags"), null);
    }

    public <O extends Record> ImageTags(Table<O> child, ForeignKey<O, ImageTagsRecord> key) {
        super(child, key, IMAGE_TAGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ImageTags as(String alias) {
        return new ImageTags(DSL.name(alias), this);
    }

    @Override
    public ImageTags as(Name alias) {
        return new ImageTags(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageTags rename(String name) {
        return new ImageTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageTags rename(Name name) {
        return new ImageTags(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
