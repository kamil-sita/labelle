/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.PreferencesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Preferences extends TableImpl<PreferencesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.preferences</code>
     */
    public static final Preferences PREFERENCES = new Preferences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PreferencesRecord> getRecordType() {
        return PreferencesRecord.class;
    }

    /**
     * The column <code>public.preferences.name</code>.
     */
    public final TableField<PreferencesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.preferences.value</code>.
     */
    public final TableField<PreferencesRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    private Preferences(Name alias, Table<PreferencesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Preferences(Name alias, Table<PreferencesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.preferences</code> table reference
     */
    public Preferences(String alias) {
        this(DSL.name(alias), PREFERENCES);
    }

    /**
     * Create an aliased <code>public.preferences</code> table reference
     */
    public Preferences(Name alias) {
        this(alias, PREFERENCES);
    }

    /**
     * Create a <code>public.preferences</code> table reference
     */
    public Preferences() {
        this(DSL.name("preferences"), null);
    }

    public <O extends Record> Preferences(Table<O> child, ForeignKey<O, PreferencesRecord> key) {
        super(child, key, PREFERENCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PreferencesRecord> getPrimaryKey() {
        return Keys.PREFERENCES_PKEY;
    }

    @Override
    public Preferences as(String alias) {
        return new Preferences(DSL.name(alias), this);
    }

    @Override
    public Preferences as(Name alias) {
        return new Preferences(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Preferences rename(String name) {
        return new Preferences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Preferences rename(Name name) {
        return new Preferences(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
