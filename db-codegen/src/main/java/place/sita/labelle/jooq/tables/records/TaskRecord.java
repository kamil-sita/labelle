/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import place.sita.labelle.jooq.enums.TaskStatus;
import place.sita.labelle.jooq.tables.Task;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record5<UUID, UUID, LocalDateTime, TaskStatus, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.task.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.task.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.task.task_type_id</code>.
     */
    public void setTaskTypeId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.task.task_type_id</code>.
     */
    public UUID getTaskTypeId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.task.creation_date</code>.
     */
    public void setCreationDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.task.creation_date</code>.
     */
    public LocalDateTime getCreationDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.task.status</code>.
     */
    public void setStatus(TaskStatus value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.task.status</code>.
     */
    public TaskStatus getStatus() {
        return (TaskStatus) get(3);
    }

    /**
     * Setter for <code>public.task.parent</code>.
     */
    public void setParent(UUID value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.task.parent</code>.
     */
    public UUID getParent() {
        return (UUID) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, LocalDateTime, TaskStatus, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, UUID, LocalDateTime, TaskStatus, UUID> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Task.TASK.TASK_TYPE_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Task.TASK.CREATION_DATE;
    }

    @Override
    public Field<TaskStatus> field4() {
        return Task.TASK.STATUS;
    }

    @Override
    public Field<UUID> field5() {
        return Task.TASK.PARENT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getTaskTypeId();
    }

    @Override
    public LocalDateTime component3() {
        return getCreationDate();
    }

    @Override
    public TaskStatus component4() {
        return getStatus();
    }

    @Override
    public UUID component5() {
        return getParent();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getTaskTypeId();
    }

    @Override
    public LocalDateTime value3() {
        return getCreationDate();
    }

    @Override
    public TaskStatus value4() {
        return getStatus();
    }

    @Override
    public UUID value5() {
        return getParent();
    }

    @Override
    public TaskRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(UUID value) {
        setTaskTypeId(value);
        return this;
    }

    @Override
    public TaskRecord value3(LocalDateTime value) {
        setCreationDate(value);
        return this;
    }

    @Override
    public TaskRecord value4(TaskStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public TaskRecord value5(UUID value) {
        setParent(value);
        return this;
    }

    @Override
    public TaskRecord values(UUID value1, UUID value2, LocalDateTime value3, TaskStatus value4, UUID value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(UUID id, UUID taskTypeId, LocalDateTime creationDate, TaskStatus status, UUID parent) {
        super(Task.TASK);

        setId(id);
        setTaskTypeId(taskTypeId);
        setCreationDate(creationDate);
        setStatus(status);
        setParent(parent);
    }
}
