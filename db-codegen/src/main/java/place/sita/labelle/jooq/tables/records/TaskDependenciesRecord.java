/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import place.sita.labelle.jooq.tables.TaskDependencies;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDependenciesRecord extends TableRecordImpl<TaskDependenciesRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.task_dependencies.task_id</code>.
     */
    public void setTaskId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.task_dependencies.task_id</code>.
     */
    public UUID getTaskId() {
        return (UUID) get(0);
    }

    /**
     * Setter for
     * <code>public.task_dependencies.required_dependency_task_id</code>.
     */
    public void setRequiredDependencyTaskId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>public.task_dependencies.required_dependency_task_id</code>.
     */
    public UUID getRequiredDependencyTaskId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return TaskDependencies.TASK_DEPENDENCIES.TASK_ID;
    }

    @Override
    public Field<UUID> field2() {
        return TaskDependencies.TASK_DEPENDENCIES.REQUIRED_DEPENDENCY_TASK_ID;
    }

    @Override
    public UUID component1() {
        return getTaskId();
    }

    @Override
    public UUID component2() {
        return getRequiredDependencyTaskId();
    }

    @Override
    public UUID value1() {
        return getTaskId();
    }

    @Override
    public UUID value2() {
        return getRequiredDependencyTaskId();
    }

    @Override
    public TaskDependenciesRecord value1(UUID value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskDependenciesRecord value2(UUID value) {
        setRequiredDependencyTaskId(value);
        return this;
    }

    @Override
    public TaskDependenciesRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskDependenciesRecord
     */
    public TaskDependenciesRecord() {
        super(TaskDependencies.TASK_DEPENDENCIES);
    }

    /**
     * Create a detached, initialised TaskDependenciesRecord
     */
    public TaskDependenciesRecord(UUID taskId, UUID requiredDependencyTaskId) {
        super(TaskDependencies.TASK_DEPENDENCIES);

        setTaskId(taskId);
        setRequiredDependencyTaskId(requiredDependencyTaskId);
    }
}
