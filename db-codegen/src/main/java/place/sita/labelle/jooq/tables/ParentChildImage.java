/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.ParentChildImageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParentChildImage extends TableImpl<ParentChildImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.parent_child_image</code>
     */
    public static final ParentChildImage PARENT_CHILD_IMAGE = new ParentChildImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParentChildImageRecord> getRecordType() {
        return ParentChildImageRecord.class;
    }

    /**
     * The column <code>public.parent_child_image.child_image_id</code>.
     */
    public final TableField<ParentChildImageRecord, UUID> CHILD_IMAGE_ID = createField(DSL.name("child_image_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.parent_child_image.parent_image_id</code>.
     */
    public final TableField<ParentChildImageRecord, UUID> PARENT_IMAGE_ID = createField(DSL.name("parent_image_id"), SQLDataType.UUID, this, "");

    private ParentChildImage(Name alias, Table<ParentChildImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParentChildImage(Name alias, Table<ParentChildImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"parent_child_image\" as  SELECT child_image.id AS child_image_id,\n    parent_image.id AS parent_image_id\n   FROM image child_image,\n    repository_relationship,\n    image parent_image\n  WHERE ((1 = 1) AND (child_image.repository_id = repository_relationship.child_id) AND (parent_image.repository_id = repository_relationship.parent_id) AND (child_image.parent_reference = parent_image.reference_id) AND (parent_image.visible_to_children = true));"));
    }

    /**
     * Create an aliased <code>public.parent_child_image</code> table reference
     */
    public ParentChildImage(String alias) {
        this(DSL.name(alias), PARENT_CHILD_IMAGE);
    }

    /**
     * Create an aliased <code>public.parent_child_image</code> table reference
     */
    public ParentChildImage(Name alias) {
        this(alias, PARENT_CHILD_IMAGE);
    }

    /**
     * Create a <code>public.parent_child_image</code> table reference
     */
    public ParentChildImage() {
        this(DSL.name("parent_child_image"), null);
    }

    public <O extends Record> ParentChildImage(Table<O> child, ForeignKey<O, ParentChildImageRecord> key) {
        super(child, key, PARENT_CHILD_IMAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ParentChildImage as(String alias) {
        return new ParentChildImage(DSL.name(alias), this);
    }

    @Override
    public ParentChildImage as(Name alias) {
        return new ParentChildImage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParentChildImage rename(String name) {
        return new ParentChildImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParentChildImage rename(Name name) {
        return new ParentChildImage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
