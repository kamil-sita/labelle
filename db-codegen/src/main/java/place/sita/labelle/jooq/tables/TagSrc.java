/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.TagSrcRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagSrc extends TableImpl<TagSrcRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag_src</code>
     */
    public static final TagSrc TAG_SRC = new TagSrc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagSrcRecord> getRecordType() {
        return TagSrcRecord.class;
    }

    /**
     * The column <code>public.tag_src.value</code>.
     */
    public final TableField<TagSrcRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.tag_src.repository_id</code>.
     */
    public final TableField<TagSrcRecord, UUID> REPOSITORY_ID = createField(DSL.name("repository_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag_src.id</code>.
     */
    public final TableField<TagSrcRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    private TagSrc(Name alias, Table<TagSrcRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagSrc(Name alias, Table<TagSrcRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag_src</code> table reference
     */
    public TagSrc(String alias) {
        this(DSL.name(alias), TAG_SRC);
    }

    /**
     * Create an aliased <code>public.tag_src</code> table reference
     */
    public TagSrc(Name alias) {
        this(alias, TAG_SRC);
    }

    /**
     * Create a <code>public.tag_src</code> table reference
     */
    public TagSrc() {
        this(DSL.name("tag_src"), null);
    }

    public <O extends Record> TagSrc(Table<O> child, ForeignKey<O, TagSrcRecord> key) {
        super(child, key, TAG_SRC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TagSrcRecord> getPrimaryKey() {
        return Keys.TAG_SRC_PKEY;
    }

    @Override
    public List<ForeignKey<TagSrcRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG_SRC__FK_TAG_SRC_REPOSITORY_ID);
    }

    private transient Repository _repository;

    public Repository repository() {
        if (_repository == null)
            _repository = new Repository(this, Keys.TAG_SRC__FK_TAG_SRC_REPOSITORY_ID);

        return _repository;
    }

    @Override
    public TagSrc as(String alias) {
        return new TagSrc(DSL.name(alias), this);
    }

    @Override
    public TagSrc as(Name alias) {
        return new TagSrc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagSrc rename(String name) {
        return new TagSrc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagSrc rename(Name name) {
        return new TagSrc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
