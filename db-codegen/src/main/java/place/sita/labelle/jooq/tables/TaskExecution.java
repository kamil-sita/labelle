/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.enums.TaskExecutionResult;
import place.sita.labelle.jooq.tables.records.TaskExecutionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskExecution extends TableImpl<TaskExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task_execution</code>
     */
    public static final TaskExecution TASK_EXECUTION = new TaskExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskExecutionRecord> getRecordType() {
        return TaskExecutionRecord.class;
    }

    /**
     * The column <code>public.task_execution.id</code>.
     */
    public final TableField<TaskExecutionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.task_execution.task_id</code>.
     */
    public final TableField<TaskExecutionRecord, UUID> TASK_ID = createField(DSL.name("task_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.task_execution.log</code>.
     */
    public final TableField<TaskExecutionRecord, String> LOG = createField(DSL.name("log"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.task_execution.result</code>.
     */
    public final TableField<TaskExecutionRecord, TaskExecutionResult> RESULT = createField(DSL.name("result"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(place.sita.labelle.jooq.enums.TaskExecutionResult.class), this, "");

    /**
     * The column <code>public.task_execution.finished_at</code>.
     */
    public final TableField<TaskExecutionRecord, OffsetDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.task_execution.started_at</code>.
     */
    public final TableField<TaskExecutionRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.task_execution.configuration</code>.
     */
    public final TableField<TaskExecutionRecord, String> CONFIGURATION = createField(DSL.name("configuration"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.task_execution.result_value</code>.
     */
    public final TableField<TaskExecutionRecord, String> RESULT_VALUE = createField(DSL.name("result_value"), SQLDataType.CLOB, this, "");

    private TaskExecution(Name alias, Table<TaskExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskExecution(Name alias, Table<TaskExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.task_execution</code> table reference
     */
    public TaskExecution(String alias) {
        this(DSL.name(alias), TASK_EXECUTION);
    }

    /**
     * Create an aliased <code>public.task_execution</code> table reference
     */
    public TaskExecution(Name alias) {
        this(alias, TASK_EXECUTION);
    }

    /**
     * Create a <code>public.task_execution</code> table reference
     */
    public TaskExecution() {
        this(DSL.name("task_execution"), null);
    }

    public <O extends Record> TaskExecution(Table<O> child, ForeignKey<O, TaskExecutionRecord> key) {
        super(child, key, TASK_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TaskExecutionRecord> getPrimaryKey() {
        return Keys.TASK_RESULT_PKEY;
    }

    @Override
    public List<ForeignKey<TaskExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_EXECUTION__FK_TASK_RESULT_TASK_ID);
    }

    private transient Task _task;

    public Task task() {
        if (_task == null)
            _task = new Task(this, Keys.TASK_EXECUTION__FK_TASK_RESULT_TASK_ID);

        return _task;
    }

    @Override
    public TaskExecution as(String alias) {
        return new TaskExecution(DSL.name(alias), this);
    }

    @Override
    public TaskExecution as(Name alias) {
        return new TaskExecution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskExecution rename(String name) {
        return new TaskExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskExecution rename(Name name) {
        return new TaskExecution(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, TaskExecutionResult, OffsetDateTime, OffsetDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
