/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import place.sita.labelle.jooq.tables.TagSrc;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagSrcRecord extends UpdatableRecordImpl<TagSrcRecord> implements Record3<String, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.tag_src.value</code>.
     */
    public void setValue(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.tag_src.value</code>.
     */
    public String getValue() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.tag_src.repository_id</code>.
     */
    public void setRepositoryId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.tag_src.repository_id</code>.
     */
    public UUID getRepositoryId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.tag_src.id</code>.
     */
    public void setId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.tag_src.id</code>.
     */
    public UUID getId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TagSrc.TAG_SRC.VALUE;
    }

    @Override
    public Field<UUID> field2() {
        return TagSrc.TAG_SRC.REPOSITORY_ID;
    }

    @Override
    public Field<UUID> field3() {
        return TagSrc.TAG_SRC.ID;
    }

    @Override
    public String component1() {
        return getValue();
    }

    @Override
    public UUID component2() {
        return getRepositoryId();
    }

    @Override
    public UUID component3() {
        return getId();
    }

    @Override
    public String value1() {
        return getValue();
    }

    @Override
    public UUID value2() {
        return getRepositoryId();
    }

    @Override
    public UUID value3() {
        return getId();
    }

    @Override
    public TagSrcRecord value1(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TagSrcRecord value2(UUID value) {
        setRepositoryId(value);
        return this;
    }

    @Override
    public TagSrcRecord value3(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TagSrcRecord values(String value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagSrcRecord
     */
    public TagSrcRecord() {
        super(TagSrc.TAG_SRC);
    }

    /**
     * Create a detached, initialised TagSrcRecord
     */
    public TagSrcRecord(String value, UUID repositoryId, UUID id) {
        super(TagSrc.TAG_SRC);

        setValue(value);
        setRepositoryId(repositoryId);
        setId(id);
    }
}
