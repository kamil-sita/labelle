/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import place.sita.labelle.jooq.tables.ParentChildImage;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParentChildImageRecord extends TableRecordImpl<ParentChildImageRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.parent_child_image.child_image_id</code>.
     */
    public void setChildImageId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.parent_child_image.child_image_id</code>.
     */
    public UUID getChildImageId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.parent_child_image.parent_image_id</code>.
     */
    public void setParentImageId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.parent_child_image.parent_image_id</code>.
     */
    public UUID getParentImageId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ParentChildImage.PARENT_CHILD_IMAGE.CHILD_IMAGE_ID;
    }

    @Override
    public Field<UUID> field2() {
        return ParentChildImage.PARENT_CHILD_IMAGE.PARENT_IMAGE_ID;
    }

    @Override
    public UUID component1() {
        return getChildImageId();
    }

    @Override
    public UUID component2() {
        return getParentImageId();
    }

    @Override
    public UUID value1() {
        return getChildImageId();
    }

    @Override
    public UUID value2() {
        return getParentImageId();
    }

    @Override
    public ParentChildImageRecord value1(UUID value) {
        setChildImageId(value);
        return this;
    }

    @Override
    public ParentChildImageRecord value2(UUID value) {
        setParentImageId(value);
        return this;
    }

    @Override
    public ParentChildImageRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ParentChildImageRecord
     */
    public ParentChildImageRecord() {
        super(ParentChildImage.PARENT_CHILD_IMAGE);
    }

    /**
     * Create a detached, initialised ParentChildImageRecord
     */
    public ParentChildImageRecord(UUID childImageId, UUID parentImageId) {
        super(ParentChildImage.PARENT_CHILD_IMAGE);

        setChildImageId(childImageId);
        setParentImageId(parentImageId);
    }
}
