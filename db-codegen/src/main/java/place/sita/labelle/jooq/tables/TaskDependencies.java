/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.TaskDependenciesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDependencies extends TableImpl<TaskDependenciesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task_dependencies</code>
     */
    public static final TaskDependencies TASK_DEPENDENCIES = new TaskDependencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskDependenciesRecord> getRecordType() {
        return TaskDependenciesRecord.class;
    }

    /**
     * The column <code>public.task_dependencies.task_id</code>.
     */
    public final TableField<TaskDependenciesRecord, UUID> TASK_ID = createField(DSL.name("task_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.task_dependencies.required_dependency_task_id</code>.
     */
    public final TableField<TaskDependenciesRecord, UUID> REQUIRED_DEPENDENCY_TASK_ID = createField(DSL.name("required_dependency_task_id"), SQLDataType.UUID.nullable(false), this, "");

    private TaskDependencies(Name alias, Table<TaskDependenciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskDependencies(Name alias, Table<TaskDependenciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.task_dependencies</code> table reference
     */
    public TaskDependencies(String alias) {
        this(DSL.name(alias), TASK_DEPENDENCIES);
    }

    /**
     * Create an aliased <code>public.task_dependencies</code> table reference
     */
    public TaskDependencies(Name alias) {
        this(alias, TASK_DEPENDENCIES);
    }

    /**
     * Create a <code>public.task_dependencies</code> table reference
     */
    public TaskDependencies() {
        this(DSL.name("task_dependencies"), null);
    }

    public <O extends Record> TaskDependencies(Table<O> child, ForeignKey<O, TaskDependenciesRecord> key) {
        super(child, key, TASK_DEPENDENCIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<TaskDependenciesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_DEPENDENCIES__TASK_DEPENDENCIES_TASK_ID, Keys.TASK_DEPENDENCIES__TASK_DEPENDENCIES_TASK_DEPENDENCY_ID);
    }

    private transient Task _taskDependenciesTaskId;
    private transient Task _taskDependenciesTaskDependencyId;

    public Task taskDependenciesTaskId() {
        if (_taskDependenciesTaskId == null)
            _taskDependenciesTaskId = new Task(this, Keys.TASK_DEPENDENCIES__TASK_DEPENDENCIES_TASK_ID);

        return _taskDependenciesTaskId;
    }

    public Task taskDependenciesTaskDependencyId() {
        if (_taskDependenciesTaskDependencyId == null)
            _taskDependenciesTaskDependencyId = new Task(this, Keys.TASK_DEPENDENCIES__TASK_DEPENDENCIES_TASK_DEPENDENCY_ID);

        return _taskDependenciesTaskDependencyId;
    }

    @Override
    public TaskDependencies as(String alias) {
        return new TaskDependencies(DSL.name(alias), this);
    }

    @Override
    public TaskDependencies as(Name alias) {
        return new TaskDependencies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDependencies rename(String name) {
        return new TaskDependencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDependencies rename(Name name) {
        return new TaskDependencies(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
