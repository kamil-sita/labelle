/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.RootRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Root extends TableImpl<RootRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.root</code>
     */
    public static final Root ROOT = new Root();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RootRecord> getRecordType() {
        return RootRecord.class;
    }

    /**
     * The column <code>public.root.id</code>.
     */
    public final TableField<RootRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.root.root_dir</code>.
     */
    public final TableField<RootRecord, String> ROOT_DIR = createField(DSL.name("root_dir"), SQLDataType.CLOB.nullable(false), this, "");

    private Root(Name alias, Table<RootRecord> aliased) {
        this(alias, aliased, null);
    }

    private Root(Name alias, Table<RootRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.root</code> table reference
     */
    public Root(String alias) {
        this(DSL.name(alias), ROOT);
    }

    /**
     * Create an aliased <code>public.root</code> table reference
     */
    public Root(Name alias) {
        this(alias, ROOT);
    }

    /**
     * Create a <code>public.root</code> table reference
     */
    public Root() {
        this(DSL.name("root"), null);
    }

    public <O extends Record> Root(Table<O> child, ForeignKey<O, RootRecord> key) {
        super(child, key, ROOT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RootRecord> getPrimaryKey() {
        return Keys.ROOT_PKEY;
    }

    @Override
    public Root as(String alias) {
        return new Root(DSL.name(alias), this);
    }

    @Override
    public Root as(Name alias) {
        return new Root(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Root rename(String name) {
        return new Root(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Root rename(Name name) {
        return new Root(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
