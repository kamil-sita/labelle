/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import place.sita.labelle.jooq.tables.RepositoryRelationship;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepositoryRelationshipRecord extends UpdatableRecordImpl<RepositoryRelationshipRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.repository_relationship.child_id</code>.
     */
    public void setChildId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.repository_relationship.child_id</code>.
     */
    public UUID getChildId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.repository_relationship.parent_id</code>.
     */
    public void setParentId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.repository_relationship.parent_id</code>.
     */
    public UUID getParentId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RepositoryRelationship.REPOSITORY_RELATIONSHIP.CHILD_ID;
    }

    @Override
    public Field<UUID> field2() {
        return RepositoryRelationship.REPOSITORY_RELATIONSHIP.PARENT_ID;
    }

    @Override
    public UUID component1() {
        return getChildId();
    }

    @Override
    public UUID component2() {
        return getParentId();
    }

    @Override
    public UUID value1() {
        return getChildId();
    }

    @Override
    public UUID value2() {
        return getParentId();
    }

    @Override
    public RepositoryRelationshipRecord value1(UUID value) {
        setChildId(value);
        return this;
    }

    @Override
    public RepositoryRelationshipRecord value2(UUID value) {
        setParentId(value);
        return this;
    }

    @Override
    public RepositoryRelationshipRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RepositoryRelationshipRecord
     */
    public RepositoryRelationshipRecord() {
        super(RepositoryRelationship.REPOSITORY_RELATIONSHIP);
    }

    /**
     * Create a detached, initialised RepositoryRelationshipRecord
     */
    public RepositoryRelationshipRecord(UUID childId, UUID parentId) {
        super(RepositoryRelationship.REPOSITORY_RELATIONSHIP);

        setChildId(childId);
        setParentId(parentId);
    }
}
