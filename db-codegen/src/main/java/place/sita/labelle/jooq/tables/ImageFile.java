/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.ImageFileRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageFile extends TableImpl<ImageFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.image_file</code>
     */
    public static final ImageFile IMAGE_FILE = new ImageFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageFileRecord> getRecordType() {
        return ImageFileRecord.class;
    }

    /**
     * The column <code>public.image_file.id</code>.
     */
    public final TableField<ImageFileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.image_file.root_id</code>.
     */
    public final TableField<ImageFileRecord, UUID> ROOT_ID = createField(DSL.name("root_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.image_file.relative_dir</code>.
     */
    public final TableField<ImageFileRecord, String> RELATIVE_DIR = createField(DSL.name("relative_dir"), SQLDataType.CLOB.nullable(false), this, "");

    private ImageFile(Name alias, Table<ImageFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageFile(Name alias, Table<ImageFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.image_file</code> table reference
     */
    public ImageFile(String alias) {
        this(DSL.name(alias), IMAGE_FILE);
    }

    /**
     * Create an aliased <code>public.image_file</code> table reference
     */
    public ImageFile(Name alias) {
        this(alias, IMAGE_FILE);
    }

    /**
     * Create a <code>public.image_file</code> table reference
     */
    public ImageFile() {
        this(DSL.name("image_file"), null);
    }

    public <O extends Record> ImageFile(Table<O> child, ForeignKey<O, ImageFileRecord> key) {
        super(child, key, IMAGE_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ImageFileRecord> getPrimaryKey() {
        return Keys.IMAGE_FILE_PKEY;
    }

    @Override
    public List<ForeignKey<ImageFileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IMAGE_FILE__FK_IMAGE_FILE_ROOT_ID);
    }

    private transient Root _root;

    public Root root() {
        if (_root == null)
            _root = new Root(this, Keys.IMAGE_FILE__FK_IMAGE_FILE_ROOT_ID);

        return _root;
    }

    @Override
    public ImageFile as(String alias) {
        return new ImageFile(DSL.name(alias), this);
    }

    @Override
    public ImageFile as(Name alias) {
        return new ImageFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageFile rename(String name) {
        return new ImageFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageFile rename(Name name) {
        return new ImageFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
