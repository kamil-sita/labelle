/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.RepositoryRelationshipRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepositoryRelationship extends TableImpl<RepositoryRelationshipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.repository_relationship</code>
     */
    public static final RepositoryRelationship REPOSITORY_RELATIONSHIP = new RepositoryRelationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepositoryRelationshipRecord> getRecordType() {
        return RepositoryRelationshipRecord.class;
    }

    /**
     * The column <code>public.repository_relationship.child_id</code>.
     */
    public final TableField<RepositoryRelationshipRecord, UUID> CHILD_ID = createField(DSL.name("child_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.repository_relationship.parent_id</code>.
     */
    public final TableField<RepositoryRelationshipRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID.nullable(false), this, "");

    private RepositoryRelationship(Name alias, Table<RepositoryRelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private RepositoryRelationship(Name alias, Table<RepositoryRelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.repository_relationship</code> table
     * reference
     */
    public RepositoryRelationship(String alias) {
        this(DSL.name(alias), REPOSITORY_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>public.repository_relationship</code> table
     * reference
     */
    public RepositoryRelationship(Name alias) {
        this(alias, REPOSITORY_RELATIONSHIP);
    }

    /**
     * Create a <code>public.repository_relationship</code> table reference
     */
    public RepositoryRelationship() {
        this(DSL.name("repository_relationship"), null);
    }

    public <O extends Record> RepositoryRelationship(Table<O> child, ForeignKey<O, RepositoryRelationshipRecord> key) {
        super(child, key, REPOSITORY_RELATIONSHIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RepositoryRelationshipRecord> getPrimaryKey() {
        return Keys.CATALOGUE_RELATIONSHIP_PKEY;
    }

    @Override
    public List<ForeignKey<RepositoryRelationshipRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPOSITORY_RELATIONSHIP__FK_CATALOGUE_RELATIONSHIP_CHILD_ID, Keys.REPOSITORY_RELATIONSHIP__FK_CATALOGUE_RELATIONSHIP_PARENT_ID);
    }

    private transient Repository _fkCatalogueRelationshipChildId;
    private transient Repository _fkCatalogueRelationshipParentId;

    public Repository fkCatalogueRelationshipChildId() {
        if (_fkCatalogueRelationshipChildId == null)
            _fkCatalogueRelationshipChildId = new Repository(this, Keys.REPOSITORY_RELATIONSHIP__FK_CATALOGUE_RELATIONSHIP_CHILD_ID);

        return _fkCatalogueRelationshipChildId;
    }

    public Repository fkCatalogueRelationshipParentId() {
        if (_fkCatalogueRelationshipParentId == null)
            _fkCatalogueRelationshipParentId = new Repository(this, Keys.REPOSITORY_RELATIONSHIP__FK_CATALOGUE_RELATIONSHIP_PARENT_ID);

        return _fkCatalogueRelationshipParentId;
    }

    @Override
    public RepositoryRelationship as(String alias) {
        return new RepositoryRelationship(DSL.name(alias), this);
    }

    @Override
    public RepositoryRelationship as(Name alias) {
        return new RepositoryRelationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RepositoryRelationship rename(String name) {
        return new RepositoryRelationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepositoryRelationship rename(Name name) {
        return new RepositoryRelationship(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
