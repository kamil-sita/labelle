/*
 * This file is generated by jOOQ.
 */
package place.sita.labelle.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import place.sita.labelle.jooq.Keys;
import place.sita.labelle.jooq.Public;
import place.sita.labelle.jooq.tables.records.TagImageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagImage extends TableImpl<TagImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag_image</code>
     */
    public static final TagImage TAG_IMAGE = new TagImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagImageRecord> getRecordType() {
        return TagImageRecord.class;
    }

    /**
     * The column <code>public.tag_image.image_id</code>.
     */
    public final TableField<TagImageRecord, UUID> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.tag_image.tag_id</code>.
     */
    public final TableField<TagImageRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    private TagImage(Name alias, Table<TagImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagImage(Name alias, Table<TagImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag_image</code> table reference
     */
    public TagImage(String alias) {
        this(DSL.name(alias), TAG_IMAGE);
    }

    /**
     * Create an aliased <code>public.tag_image</code> table reference
     */
    public TagImage(Name alias) {
        this(alias, TAG_IMAGE);
    }

    /**
     * Create a <code>public.tag_image</code> table reference
     */
    public TagImage() {
        this(DSL.name("tag_image"), null);
    }

    public <O extends Record> TagImage(Table<O> child, ForeignKey<O, TagImageRecord> key) {
        super(child, key, TAG_IMAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<TagImageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG_IMAGE__FK_TAG_IMAGE_ID, Keys.TAG_IMAGE__FK_TAG_IMAGE_TAG_ID);
    }

    private transient Image _image;
    private transient Tag _tag;

    public Image image() {
        if (_image == null)
            _image = new Image(this, Keys.TAG_IMAGE__FK_TAG_IMAGE_ID);

        return _image;
    }

    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.TAG_IMAGE__FK_TAG_IMAGE_TAG_ID);

        return _tag;
    }

    @Override
    public TagImage as(String alias) {
        return new TagImage(DSL.name(alias), this);
    }

    @Override
    public TagImage as(Name alias) {
        return new TagImage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagImage rename(String name) {
        return new TagImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagImage rename(Name name) {
        return new TagImage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
